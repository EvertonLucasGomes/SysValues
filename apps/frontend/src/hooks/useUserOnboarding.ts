import { useState, useEffect } from "react";

interface OnboardingState {
Â  hasSeenAlertsTutorial: boolean;
Â  hasSeenDashboardTutorial: boolean;
Â  isNewUser: boolean;
}

export function useUserOnboarding() {
Â  const [onboardingState, setOnboardingState] = useState<OnboardingState>({
Â  Â  hasSeenAlertsTutorial: false,
Â  Â  hasSeenDashboardTutorial: false,
Â  Â  isNewUser: true,
Â  });

Â  useEffect(() => {
Â  Â  // Carregar estado do localStorage
Â  Â  const savedState = localStorage.getItem("agrosys_onboarding");
Â  Â  if (savedState) {
Â  Â  Â  const parsed = JSON.parse(savedState);
Â  Â  Â  setOnboardingState(parsed);
Â  Â  }
Â  }, []);

Â  const markAlertsTutorialAsSeen = () => {
Â  Â  const newState = {
Â  Â  Â  ...onboardingState,
Â  Â  Â  hasSeenAlertsTutorial: true,
Â  Â  Â  isNewUser: false,
Â  Â  };
Â  Â  setOnboardingState(newState);
Â  Â  localStorage.setItem("agrosys_onboarding", JSON.stringify(newState));
Â  };

Â  const markDashboardTutorialAsSeen = () => {
Â  Â  const newState = {
Â  Â  Â  ...onboardingState,
Â  Â  Â  hasSeenDashboardTutorial: true,
Â  Â  Â  isNewUser: false,
Â  Â  };
Â  Â  setOnboardingState(newState);
Â  Â  localStorage.setItem("agrosys_onboarding", JSON.stringify(newState));
Â  };

  /** ðŸŽ¯ NOVO CÃ“DIGO AQUI: FunÃ§Ã£o para pular a configuraÃ§Ã£o inicial */
Â  const skipOnboarding = () => {
Â  Â  const newState = {
Â  Â  Â  ...onboardingState,
      // Marcamos como "visto" e "nÃ£o novo usuÃ¡rio" para que o onboarding nÃ£o apareÃ§a
Â  Â  Â  hasSeenAlertsTutorial: true,
Â  Â  Â  hasSeenDashboardTutorial: true, 
Â  Â  Â  isNewUser: false,
Â  Â  };
Â  Â  setOnboardingState(newState);
Â  Â  localStorage.setItem("agrosys_onboarding", JSON.stringify(newState));
Â  };
  /** FIM DO NOVO CÃ“DIGO */

Â  const resetOnboarding = () => {
Â  Â  const newState = {
Â  Â  Â  hasSeenAlertsTutorial: false,
Â  Â  Â  hasSeenDashboardTutorial: false,
Â  Â  Â  isNewUser: true,
Â  Â  };
Â  Â  setOnboardingState(newState);
Â  Â  localStorage.setItem("agrosys_onboarding", JSON.stringify(newState));
Â  };

Â  return {
Â  Â  ...onboardingState,
Â  Â  markAlertsTutorialAsSeen,
Â  Â  markDashboardTutorialAsSeen,
Â  Â  resetOnboarding,
    skipOnboarding, // <-- NOVO: Retorne a funÃ§Ã£o para ser usada no DashboardPage
Â  };
}






// import { useState, useEffect } from "react";

// interface OnboardingState {
//   hasSeenAlertsTutorial: boolean;
//   hasSeenDashboardTutorial: boolean;
//   isNewUser: boolean;
// }

// export function useUserOnboarding() {
//   const [onboardingState, setOnboardingState] = useState<OnboardingState>({
//     hasSeenAlertsTutorial: false,
//     hasSeenDashboardTutorial: false,
//     isNewUser: true,
//   });

//   useEffect(() => {
//     // Carregar estado do localStorage
//     const savedState = localStorage.getItem("agrosys_onboarding");
//     if (savedState) {
//       const parsed = JSON.parse(savedState);
//       setOnboardingState(parsed);
//     }
//   }, []);

//   const markAlertsTutorialAsSeen = () => {
//     const newState = {
//       ...onboardingState,
//       hasSeenAlertsTutorial: true,
//       isNewUser: false,
//     };
//     setOnboardingState(newState);
//     localStorage.setItem("agrosys_onboarding", JSON.stringify(newState));
//   };

//   const markDashboardTutorialAsSeen = () => {
//     const newState = {
//       ...onboardingState,
//       hasSeenDashboardTutorial: true,
//       isNewUser: false,
//     };
//     setOnboardingState(newState);
//     localStorage.setItem("agrosys_onboarding", JSON.stringify(newState));
//   };

//   const resetOnboarding = () => {
//     const newState = {
//       hasSeenAlertsTutorial: false,
//       hasSeenDashboardTutorial: false,
//       isNewUser: true,
//     };
//     setOnboardingState(newState);
//     localStorage.setItem("agrosys_onboarding", JSON.stringify(newState));
//   };

//   return {
//     ...onboardingState,
//     markAlertsTutorialAsSeen,
//     markDashboardTutorialAsSeen,
//     resetOnboarding,
//   };
// }
